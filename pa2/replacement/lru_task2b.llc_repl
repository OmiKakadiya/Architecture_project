#include "cache.h"

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    cout << NAME << " has LRU replacement policy" << endl;
}

void CACHE::adjust_set_partitioning()
{
    //cout << "Start adjustment------------------------------------------------------------------------------- \n";
    //cout << "Allocation: CPU 0: " << set_allocation[0] << ", CPU 1: " << set_allocation[1] << endl;

    uint32_t min_sets_per_core = NUM_SET / 4; // Minimum sets per CPU
    uint64_t total_self_evictions = self_evictions[0] + self_evictions[1];

    // If no self-evictions happened, do not change partitioning
    if (total_self_evictions == 0)
    {
        cout << "No self-evictions occurred. Keeping current partitioning.\n";
        return;
    }
    //cout << "Total Self : " << total_self_evictions << endl;

    // Ensure each CPU gets at least the minimum allocation
    for (uint32_t cpu = 0; cpu < NUM_CPUS; cpu++)
    {
        //cout << "Self Eviction CPU " << cpu << " " << self_evictions[cpu] << endl;
        double eviction_ratio = (double)self_evictions[cpu] / (double)total_self_evictions;

        set_allocation[cpu] = min_sets_per_core + (uint32_t)(eviction_ratio * 2048);
       // cout << "CPU " << cpu << " Eviction Rat.io: " << eviction_ratio << " New Allocation: " << set_allocation[cpu] << endl;
    }

    //cout << "Done ------------------------------------------------------------------------------- \n";
    //cout << "Allocation: CPU 0: " << set_allocation[0] << ", CPU 1: " << set_allocation[1] << endl;
    //cout << ------------------------------------------------------------------------------- \n";
    //cout << ------------------------------------------------------------------------------- \n";

}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    // baseline LRU
    uint32_t way = lru_victim(cpu, instr_id, set, current_set, ip, full_addr, type);

    // cout << "CPU " << cpu << " Set " << set << endl;
    if (block[set][way].valid == 1) {
        self_evictions[cpu]++;
    }
    return way;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{

    if ((type == WRITEBACK) && ip)
        assert(0);

    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;
    cycle_count++;
    if (cycle_count % partition_interval == 0)
    {
        adjust_set_partitioning();
        // cout << "Updated set allocation based on self-evictions!" << endl;
    }
    return lru_update(set, way);
}

void CACHE::llc_replacement_final_stats()
{
    cout << "Self-Eviction Stat:" << endl;
    for (int i = 0; i < NUM_CPUS; i++)
    {
        cout << "CPU " << i << " : " << self_evictions[i] << endl;
    }
}